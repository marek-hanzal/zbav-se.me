/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * zbav.se.me API
 * OpenAPI spec version: 0.5.0
 */

import type { AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";

/**
 * Represents a group of categories a listing can be assigned to
 */
export interface CategoryGroup {
	/** ID of the category group */
	id: string;
	/** Name of the category group */
	name: string;
	/** Sort order (position) of the category group */
	sort: number;
}

/**
 * Cursor for pagination
 * @nullable
 */
export type Cursor = {
	/**
	 * Page number (0-indexed)
	 * @minimum 0
	 */
	page: number;
	/**
	 * Page size
	 * @minimum 1
	 * @maximum 1000
	 */
	size: number;
} | null;

/**
 * User-land filters
 * @nullable
 */
export type CategoryGroupFilter = {
	/**
	 * This filter matches the exact id
	 * @nullable
	 */
	id?: string | null;
	/**
	 * This filter matches the ids
	 * @nullable
	 */
	idIn?: string[] | null;
	/**
	 * Runs fulltext on the collection/query.
	 * @nullable
	 */
	fulltext?: string | null;
	/**
	 * This filter matches the exact name of the category group
	 * @nullable
	 */
	name?: string | null;
} | null;

/**
 * App-based filters
 * @nullable
 */
export type CategoryGroupWhere = {
	/**
	 * This filter matches the exact id
	 * @nullable
	 */
	id?: string | null;
	/**
	 * This filter matches the ids
	 * @nullable
	 */
	idIn?: string[] | null;
	/**
	 * Runs fulltext on the collection/query.
	 * @nullable
	 */
	fulltext?: string | null;
	/**
	 * This filter matches the exact name of the category group
	 * @nullable
	 */
	name?: string | null;
} | null;

export type CategoryGroupSortValue =
	(typeof CategoryGroupSortValue)[keyof typeof CategoryGroupSortValue];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryGroupSortValue = {
	name: "name",
	sort: "sort",
} as const;

/**
 * @nullable
 */
export type CategoryGroupSortSort =
	| (typeof CategoryGroupSortSort)[keyof typeof CategoryGroupSortSort]
	| null;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryGroupSortSort = {
	asc: "asc",
	desc: "desc",
} as const;

/**
 * Sort object for category group collection
 */
export interface CategoryGroupSort {
	value: CategoryGroupSortValue;
	/** @nullable */
	sort?: CategoryGroupSortSort;
}

/**
 * Query object for category group collection
 */
export interface CategoryGroupQuery {
	cursor?: Cursor;
	filter?: CategoryGroupFilter;
	where?: CategoryGroupWhere;
	/** @nullable */
	sort?: CategoryGroupSort[] | null;
}

/**
 * Complex count of items based on provided query.
 */
export interface Count {
	/** Count of items based on provided where query. */
	where: number;
	/** Count of items based on provided filter query. */
	filter: number;
	/** Total count of items (no filters applied). */
	total: number;
}

/**
 * Represents a category a listing can be assigned to
 */
export interface Category {
	/** ID of the category */
	id: string;
	/** Name of the category */
	name: string;
	/** Sort order (position) of the category */
	sort: number;
	/** ID of the category group the category belongs to */
	categoryGroupId: string;
}

/**
 * User-land filters
 * @nullable
 */
export type CategoryFilter = {
	/**
	 * This filter matches the exact id
	 * @nullable
	 */
	id?: string | null;
	/**
	 * This filter matches the ids
	 * @nullable
	 */
	idIn?: string[] | null;
	/**
	 * Runs fulltext on the collection/query.
	 * @nullable
	 */
	fulltext?: string | null;
	/**
	 * This filter matches the exact name of the category
	 * @nullable
	 */
	name?: string | null;
	/**
	 * This filter matches the exact id of the category group the category belongs to
	 * @nullable
	 */
	categoryGroupId?: string | null;
	/**
	 * This filter matches the ids of the category groups the category belongs to
	 * @nullable
	 */
	categoryGroupIdIn?: string[] | null;
} | null;

/**
 * App-based filters
 * @nullable
 */
export type CategoryWhere = {
	/**
	 * This filter matches the exact id
	 * @nullable
	 */
	id?: string | null;
	/**
	 * This filter matches the ids
	 * @nullable
	 */
	idIn?: string[] | null;
	/**
	 * Runs fulltext on the collection/query.
	 * @nullable
	 */
	fulltext?: string | null;
	/**
	 * This filter matches the exact name of the category
	 * @nullable
	 */
	name?: string | null;
	/**
	 * This filter matches the exact id of the category group the category belongs to
	 * @nullable
	 */
	categoryGroupId?: string | null;
	/**
	 * This filter matches the ids of the category groups the category belongs to
	 * @nullable
	 */
	categoryGroupIdIn?: string[] | null;
} | null;

export type CategorySortValue =
	(typeof CategorySortValue)[keyof typeof CategorySortValue];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategorySortValue = {
	name: "name",
	sort: "sort",
} as const;

/**
 * @nullable
 */
export type CategorySortSort =
	| (typeof CategorySortSort)[keyof typeof CategorySortSort]
	| null;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategorySortSort = {
	asc: "asc",
	desc: "desc",
} as const;

/**
 * Sort object for category collection
 */
export interface CategorySort {
	value: CategorySortValue;
	/** @nullable */
	sort?: CategorySortSort;
}

/**
 * Query object for category collection
 */
export interface CategoryQuery {
	cursor?: Cursor;
	filter?: CategoryFilter;
	where?: CategoryWhere;
	/** @nullable */
	sort?: CategorySort[] | null;
}

/**
 * A location cache table
 */
export interface Location {
	id: string;
	/** The query that was used to get the location */
	query: string;
	/** The language that was used to get the location */
	lang: string;
	/** The country that the location is in */
	country: string;
	/** Country code */
	code: string;
	/**
	 * The county that the location is in
	 * @nullable
	 */
	county?: string | null;
	/**
	 * The municipality that the location is in
	 * @nullable
	 */
	municipality?: string | null;
	/**
	 * The state that the location is in
	 * @nullable
	 */
	state?: string | null;
	/** Full address preview of a location */
	address: string;
	/**
	 * Confidence score of the location (based on query)
	 * @nullable
	 */
	confidence: number | null;
	/** Used to uniquely identify this location entry */
	hash: string;
	/**
	 * Latitude of the location
	 * @nullable
	 */
	lat: number | null;
	/**
	 * Longitude of the location
	 * @nullable
	 */
	lon: number | null;
}

/**
 * Migration direction
 */
export type MigrationDirection =
	(typeof MigrationDirection)[keyof typeof MigrationDirection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MigrationDirection = {
	Up: "Up",
	Down: "Down",
} as const;

/**
 * Migration status
 */
export type MigrationStatus =
	(typeof MigrationStatus)[keyof typeof MigrationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MigrationStatus = {
	Success: "Success",
	Error: "Error",
	NotExecuted: "NotExecuted",
} as const;

export interface Migration {
	/** Migration name run */
	migrationName: string;
	/** Migration direction */
	direction: MigrationDirection;
	/** Migration status */
	status: MigrationStatus;
}

export interface Health {
	status: boolean;
}

export type ApiLocationAutocompleteParams = {
	/**
	 * @minLength 3
	 */
	text: string;
	/**
	 * @minLength 2
	 * @maxLength 8
	 */
	lang: string;
};

/**
 * Return a category group based on the provided query
 */
export const apiCategoryGroupFetch = <TData = AxiosResponse<CategoryGroup>>(
	categoryGroupQuery: CategoryGroupQuery,
	options?: AxiosRequestConfig,
): Promise<TData> => {
	return axios.post(`/api/category-group/fetch`, categoryGroupQuery, options);
};

/**
 * Returns category groups based on provided parameters
 */
export const apiCategoryGroupCollection = <
	TData = AxiosResponse<CategoryGroup[]>,
>(
	categoryGroupQuery: CategoryGroupQuery,
	options?: AxiosRequestConfig,
): Promise<TData> => {
	return axios.post(
		`/api/category-group/collection`,
		categoryGroupQuery,
		options,
	);
};

/**
 * Returns count of category groups based on provided query
 */
export const apiCategoryGroupCount = <TData = AxiosResponse<Count>>(
	categoryGroupQuery: CategoryGroupQuery,
	options?: AxiosRequestConfig,
): Promise<TData> => {
	return axios.post(`/api/category-group/count`, categoryGroupQuery, options);
};

/**
 * Return a category based on the provided query
 */
export const apiCategoryFetch = <TData = AxiosResponse<Category>>(
	categoryQuery: CategoryQuery,
	options?: AxiosRequestConfig,
): Promise<TData> => {
	return axios.post(`/api/category/fetch`, categoryQuery, options);
};

/**
 * Returns categories based on provided parameters
 */
export const apiCategoryCollection = <TData = AxiosResponse<Category[]>>(
	categoryQuery: CategoryQuery,
	options?: AxiosRequestConfig,
): Promise<TData> => {
	return axios.post(`/api/category/collection`, categoryQuery, options);
};

/**
 * Returns count of categories based on provided query
 */
export const apiCategoryCount = <TData = AxiosResponse<Count>>(
	categoryQuery: CategoryQuery,
	options?: AxiosRequestConfig,
): Promise<TData> => {
	return axios.post(`/api/category/count`, categoryQuery, options);
};

/**
 * Return a location autocomplete
 */
export const apiLocationAutocomplete = <TData = AxiosResponse<Location[]>>(
	params: ApiLocationAutocompleteParams,
	options?: AxiosRequestConfig,
): Promise<TData> => {
	return axios.get(`/api/location/autocomplete`, {
		...options,
		params: {
			...params,
			...options?.params,
		},
	});
};

/**
 * This route directly executes the migrations
 */
export const apiMigrationRun = <TData = AxiosResponse<Migration[]>>(
	options?: AxiosRequestConfig,
): Promise<TData> => {
	return axios.get(`/api/migration/run`, options);
};

/**
 * Provides health check, just returns a bool; if this endpoint does not work, something is really wrong.
 */
export const apiHealth = <TData = AxiosResponse<Health>>(
	options?: AxiosRequestConfig,
): Promise<TData> => {
	return axios.get(`/api/health`, options);
};

export type ApiCategoryGroupFetchResult = AxiosResponse<CategoryGroup>;
export type ApiCategoryGroupCollectionResult = AxiosResponse<CategoryGroup[]>;
export type ApiCategoryGroupCountResult = AxiosResponse<Count>;
export type ApiCategoryFetchResult = AxiosResponse<Category>;
export type ApiCategoryCollectionResult = AxiosResponse<Category[]>;
export type ApiCategoryCountResult = AxiosResponse<Count>;
export type ApiLocationAutocompleteResult = AxiosResponse<Location[]>;
export type ApiMigrationRunResult = AxiosResponse<Migration[]>;
export type ApiHealthResult = AxiosResponse<Health>;
