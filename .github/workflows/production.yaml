name: Production Deploy

on:
    push:
        branches: ["main"]

concurrency:
    group: production-deploy
    cancel-in-progress: false

permissions:
    contents: read

jobs:
    validate-env:
        name: Validate environment variables & secrets
        runs-on: ubuntu-latest
        environment: production
        env:
            VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
            VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID }}
            VERCEL_CLIENT_PROJECT_ID: ${{ vars.VERCEL_CLIENT_PROJECT_ID }}
            VERCEL_SERVER_PROJECT_ID: ${{ vars.VERCEL_SERVER_PROJECT_ID }}
            VITE_ASSET_BASE: ${{ vars.VITE_ASSET_BASE }}
            VITE_API: ${{ vars.VITE_API }}
            BUNNY_HOST: ${{ vars.BUNNY_HOST }}
            BUNNY_USER: ${{ vars.BUNNY_USER }}
            BUNNY_TOKEN: ${{ secrets.BUNNY_TOKEN }}
        steps:
            - name: Check required vars (fail fast)
              run: |
                  set -euo pipefail
                  : "${VERCEL_TOKEN:?VERCEL_TOKEN missing}"
                  : "${VERCEL_ORG_ID:?VERCEL_ORG_ID missing}"
                  : "${VERCEL_CLIENT_PROJECT_ID:?VERCEL_CLIENT_PROJECT_ID missing}"
                  : "${VERCEL_SERVER_PROJECT_ID:?VERCEL_SERVER_PROJECT_ID missing}"
                  : "${VITE_ASSET_BASE:?VITE_ASSET_BASE missing}"
                  : "${VITE_API:?VITE_API missing}"
                  : "${BUNNY_HOST:?BUNNY_HOST missing}"
                  : "${BUNNY_USER:?BUNNY_USER missing}"
                  : "${BUNNY_TOKEN:?BUNNY_TOKEN missing}"
                  echo "OK: required variables present."

    client-build:
        name: Build client
        runs-on: ubuntu-latest
        environment: production
        needs: [validate-env]
        env:
            VITE_ASSET_BASE: ${{ vars.VITE_ASSET_BASE }}
            VITE_API: ${{ vars.VITE_API }}
        steps:
            - uses: actions/checkout@v4

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2

            - name: Cache node_modules (root)
              uses: actions/cache@v4
              with:
                  path: node_modules
                  key: root-nm-${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
                  restore-keys: |
                      root-nm-${{ runner.os }}-bun-

            - name: Cache node_modules (client, isolated)
              uses: actions/cache@v4
              with:
                  path: apps/client/node_modules
                  key: client-nm-${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
                  restore-keys: |
                      client-nm-${{ runner.os }}-bun-

            - name: Install dependencies (root)
              run: bun install

            - name: Build client
              working-directory: apps/client
              env:
                  VITE_ASSET_BASE: ${{ env.VITE_ASSET_BASE }}
              run: bun run build

            - name: Prepare Vercel output
              working-directory: apps/client
              run: |
                  rm -rf .vercel/output
                  mkdir -p .vercel/output/static
                  cp -R dist/* .vercel/output/static/
                  cat > .vercel/output/config.json <<'JSON'
                  {
                    "version": 3,
                    "routes": [
                      { "handle": "filesystem" },
                      { "src": "/(.*)", "dest": "/index.html" }
                    ]
                  }
                  JSON

            - name: Upload artifact (client prebuilt)
              uses: actions/upload-artifact@v4
              with:
                  name: client
                  path: apps/client/.vercel/output
                  include-hidden-files: true

    server-build:
        name: Build server
        runs-on: ubuntu-latest
        environment: production
        needs: [validate-env]
        env:
            VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
            VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID }}
            VERCEL_PROJECT_ID: ${{ vars.VERCEL_SERVER_PROJECT_ID }}
        steps:
            - uses: actions/checkout@v4

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2

            - name: Cache node_modules (root)
              uses: actions/cache@v4
              with:
                  path: node_modules
                  key: root-nm-${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
                  restore-keys: |
                      root-nm-${{ runner.os }}-bun-

            - name: Cache node_modules (server, isolated)
              uses: actions/cache@v4
              with:
                  path: apps/server/node_modules
                  key: server-nm-${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
                  restore-keys: |
                      server-nm-${{ runner.os }}-bun-

            - name: Install dependencies (root, workspace)
              run: bun install

            - name: Build server
              working-directory: apps/server
              run: bun run build

            - name: Upload artifact (server prebuilt)
              uses: actions/upload-artifact@v4
              with:
                  name: server
                  path: apps/server/.vercel/output
                  include-hidden-files: true

    bunny-cdn:
        name: Update CDN
        runs-on: ubuntu-latest
        environment: production
        needs: [client-build]
        env:
            BUNNY_HOST: ${{ vars.BUNNY_HOST }}
            BUNNY_USER: ${{ vars.BUNNY_USER }}
            BUNNY_TOKEN: ${{ secrets.BUNNY_TOKEN }}
        steps:
            - uses: actions/download-artifact@v4
              with:
                  name: client
                  path: apps/client/.vercel/output

            - name: Prepare rclone config
              run: |
                  CONF="${GITHUB_WORKSPACE}/rclone.conf"
                  OBF=$(docker run --rm rclone/rclone:1.66 obscure "${BUNNY_TOKEN}")
                  cat > "$CONF" <<EOF
                  [bunny]
                  type = sftp
                  host = ${BUNNY_HOST}
                  user = ${BUNNY_USER}
                  port = 22
                  pass = ${OBF}
                  EOF
                  echo "RCLONE_CONFIG=$CONF" >> "$GITHUB_ENV"

            - name: Sync CDN
              uses: docker://rclone/rclone:1.66
              with:
                  args: >
                      sync /github/workspace/apps/client/.vercel/output/static/assets bunny:/assets
                      --config /github/workspace/rclone.conf
                      --inplace
                      --sftp-set-modtime=false
                      --size-only
                      --transfers=8
                      --checkers=16
                      --fast-list
                      --timeout=2m
                      --retries=5
                      --low-level-retries=10
                      --verbose

            - name: Copy root favicon/manifest to CDN /
              uses: docker://rclone/rclone:1.66
              with:
                  args: >
                      copy /github/workspace/apps/client/.vercel/output/static bunny:/
                      --config /github/workspace/rclone.conf
                      --inplace
                      --include "/favicon*.ico"
                      --include "/favicon*.png"
                      --include "/favicon*.svg"
                      --include "/apple-touch-icon*.png"
                      --include "/site.webmanifest"
                      --exclude "*"
                      --sftp-set-modtime=false
                      --transfers=4
                      --checkers=8
                      --timeout=2m
                      --retries=5
                      --low-level-retries=10
                      --verbose

    vercel-client:
        name: Deploy client to Vercel
        runs-on: ubuntu-latest
        environment: production
        needs: [client-build]
        env:
            VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
            VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID }}
            VERCEL_PROJECT_ID: ${{ vars.VERCEL_CLIENT_PROJECT_ID }}
        steps:
            - uses: actions/download-artifact@v4
              with:
                  name: client
                  path: apps/client/.vercel/output

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2

            - name: Cache bunx packages (~/.bun)
              uses: actions/cache@v4
              with:
                  path: ~/.bun
                  key: bunx-cache-${{ runner.os }}-v1
                  restore-keys: |
                      bunx-cache-${{ runner.os }}-

            - name: Strip assets
              working-directory: apps/client
              run: rm -rf .vercel/output/static/assets || true

            - name: Deploy to Vercel
              working-directory: apps/client
              run: |
                  bunx -y vercel@latest deploy \
                    --prebuilt \
                    --prod --yes \
                    --token "$VERCEL_TOKEN"

    vercel-server:
        name: Deploy server to Vercel
        runs-on: ubuntu-latest
        environment: production
        needs: [server-build]
        env:
            VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
            VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID }}
            VERCEL_PROJECT_ID: ${{ vars.VERCEL_SERVER_PROJECT_ID }}
        steps:
            - uses: actions/download-artifact@v4
              with:
                  name: server
                  path: apps/server/.vercel/output

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2

            - name: Cache bunx packages (~/.bun)
              uses: actions/cache@v4
              with:
                  path: ~/.bun
                  key: bunx-cache-${{ runner.os }}-v1
                  restore-keys: |
                      bunx-cache-${{ runner.os }}-

            - name: Deploy to Vercel
              working-directory: apps/server
              run: |
                  bunx -y vercel@latest deploy \
                    --prebuilt \
                    --prod --yes \
                    --token "$VERCEL_TOKEN"
