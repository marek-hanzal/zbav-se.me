name: Production Deploy

on:
    push:
        branches: ["main"]

concurrency:
    group: production-deploy
    cancel-in-progress: false

permissions:
    contents: read

env:
    # -------------------------------
    # Public (non-sensitive) variables
    # -------------------------------
    BUNNY_HOST: ${{ vars.BUNNY_HOST }}
    BUNNY_USER: ${{ vars.BUNNY_USER }}
    COOKIE: ${{ vars.COOKIE }}
    NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
    ORIGIN: ${{ vars.ORIGIN }}
    VERCEL_CLIENT_PROJECT_ID: ${{ vars.VERCEL_CLIENT_PROJECT_ID }}
    VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID }}
    VERCEL_SERVER_PROJECT_ID: ${{ vars.VERCEL_SERVER_PROJECT_ID }}
    VITE_API: ${{ vars.VITE_API }}
    VITE_ASSET_BASE: ${{ vars.VITE_ASSET_BASE }}

    # --------------------------------
    # Private (sensitive) secrets
    # --------------------------------
    BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
    BUNNY_TOKEN: ${{ secrets.BUNNY_TOKEN }}
    GEOAPIFY: ${{ secrets.GEOAPIFY }}
    JWT_SECRET: ${{ secrets.JWT_SECRET }}
    NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
    VERCEL_BLOB: ${{ secrets.VERCEL_BLOB }}
    VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
    validate-env:
        name: Validate environment variables & secrets
        runs-on: ubuntu-latest
        environment: production
        steps:
            - name: Check required vars (fail fast)
              run: |
                  set -euo pipefail
                  : "${VERCEL_TOKEN:?VERCEL_TOKEN missing}"
                  : "${VERCEL_ORG_ID:?VERCEL_ORG_ID missing}"
                  : "${VERCEL_CLIENT_PROJECT_ID:?VERCEL_CLIENT_PROJECT_ID missing}"
                  : "${VERCEL_SERVER_PROJECT_ID:?VERCEL_SERVER_PROJECT_ID missing}"
                  : "${VERCEL_BLOB:?VERCEL_BLOB missing}"
                  : "${ORIGIN:?ORIGIN missing}"
                  : "${COOKIE:?COOKIE missing}"
                  : "${VITE_ASSET_BASE:?VITE_ASSET_BASE missing}"
                  : "${VITE_API:?VITE_API missing}"
                  : "${BUNNY_HOST:?BUNNY_HOST missing}"
                  : "${BUNNY_USER:?BUNNY_USER missing}"
                  : "${BUNNY_TOKEN:?BUNNY_TOKEN missing}"
                  : "${NEON_PROJECT_ID:?NEON_PROJECT_ID missing}"
                  : "${NEON_API_KEY:?NEON_API_KEY missing}"
                  : "${BETTER_AUTH_SECRET:?BETTER_AUTH_SECRET missing}"
                  : "${JWT_SECRET:?JWT_SECRET missing}"
                  : "${GEOAPIFY:?GEOAPIFY missing}"
                  echo "OK: required variables present."

    vercel-env-client:
        name: Vercel env (client)
        runs-on: ubuntu-latest
        environment: production
        needs: [validate-env]
        steps:
            - uses: actions/checkout@v4

            - name: Install Vercel CLI
              run: npm i -g vercel@latest

            - name: Upsert client env
              run: |
                  set -euo pipefail
                  for KEY in VITE_ASSET_BASE VITE_API; do
                      VAL="${!KEY}"
                      vercel env rm "$KEY" production --yes --token "$VERCEL_TOKEN" --scope "$VERCEL_SERVER_PROJECT_ID"
                      printf "%s" "$VAL" | vercel env add "$KEY" production --token "$VERCEL_TOKEN" --scope "$VERCEL_SERVER_PROJECT_ID"
                  done

    vercel-env-server:
        name: Vercel env (server)
        runs-on: ubuntu-latest
        environment: production
        needs: [validate-env]
        steps:
            - uses: actions/checkout@v4

            - name: Install Vercel CLI
              run: npm i -g vercel@latest

            - name: Resolve prod DB URL via Neon
              id: neon
              uses: neondatabase/create-branch-action@v6
              with:
                  project_id: ${{ env.NEON_PROJECT_ID }}
                  branch_name: production
                  database: neondb
                  role: neondb_owner
                  api_key: ${{ env.NEON_API_KEY }}

            - name: Upsert server env
              env:
                  DATABASE_URL: ${{ steps.neon.outputs.db_url_pooled }}
              run: |
                  set -euo pipefail
                  for KEY in ORIGIN COOKIE GEOAPIFY BETTER_AUTH_SECRET JWT_SECRET VERCEL_BLOB VITE_API DATABASE_URL; do
                      VAL="${!KEY}"
                      vercel env rm "$KEY" production --yes --token "$VERCEL_TOKEN" --scope "$VERCEL_SERVER_PROJECT_ID"
                      printf "%s" "$VAL" | vercel env add "$KEY" production --token "$VERCEL_TOKEN" --scope "$VERCEL_SERVER_PROJECT_ID"
                  done

    client-build:
        name: Build client
        runs-on: ubuntu-latest
        environment: production
        needs: [vercel-env-client]
        steps:
            - uses: actions/checkout@v4

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2

            - name: Cache node_modules (root)
              uses: actions/cache@v4
              with:
                  path: node_modules
                  key: root-nm-${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
                  restore-keys: |
                      root-nm-${{ runner.os }}-bun-

            - name: Cache node_modules (client, isolated)
              uses: actions/cache@v4
              with:
                  path: apps/client/node_modules
                  key: client-nm-${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
                  restore-keys: |
                      client-nm-${{ runner.os }}-bun-

            - name: Install dependencies (root)
              run: bun install

            - name: Build client
              working-directory: apps/client
              run: bun run build

            - name: Upload artifact (client prebuilt)
              uses: actions/upload-artifact@v4
              with:
                  name: client
                  path: apps/client/.vercel/output
                  include-hidden-files: true

    server-build:
        name: Build server
        runs-on: ubuntu-latest
        environment: production
        needs: [vercel-env-server]
        steps:
            - uses: actions/checkout@v4

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2

            - name: Cache node_modules (root)
              uses: actions/cache@v4
              with:
                  path: node_modules
                  key: root-nm-${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
                  restore-keys: |
                      root-nm-${{ runner.os }}-bun-

            - name: Cache node_modules (server, isolated)
              uses: actions/cache@v4
              with:
                  path: apps/server/node_modules
                  key: server-nm-${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
                  restore-keys: |
                      server-nm-${{ runner.os }}-bun-

            - name: Install dependencies (root, workspace)
              run: bun install

            - name: Build server
              working-directory: apps/server
              run: bun run build

            - name: Upload artifact (server prebuilt)
              uses: actions/upload-artifact@v4
              with:
                  name: server
                  path: apps/server/.vercel/output
                  include-hidden-files: true

    vercel-client:
        name: Deploy client to Vercel
        runs-on: ubuntu-latest
        environment: production
        needs: [client-build]
        steps:
            - uses: actions/download-artifact@v4
              with:
                  name: client
                  path: apps/client/.vercel/output

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2

            - name: Cache bunx packages (~/.bun)
              uses: actions/cache@v4
              with:
                  path: ~/.bun
                  key: bunx-cache-${{ runner.os }}-v1
                  restore-keys: |
                      bunx-cache-${{ runner.os }}-

            - name: Strip assets
              working-directory: apps/client
              run: rm -rf .vercel/output/static/assets || true

            - name: Deploy to Vercel (client)
              working-directory: apps/client
              run: |
                  bunx -y vercel@latest deploy \
                    --prebuilt \
                    --prod --yes \
                    --project "$VERCEL_CLIENT_PROJECT_ID" \
                    --token "$VERCEL_TOKEN"

    vercel-server:
        name: Deploy server to Vercel
        runs-on: ubuntu-latest
        environment: production
        needs: [server-build]
        steps:
            - uses: actions/download-artifact@v4
              with:
                  name: server
                  path: apps/server/.vercel/output

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2

            - name: Cache bunx packages (~/.bun)
              uses: actions/cache@v4
              with:
                  path: ~/.bun
                  key: bunx-cache-${{ runner.os }}-v1
                  restore-keys: |
                      bunx-cache-${{ runner.os }}-

            - name: Deploy to Vercel (server)
              working-directory: apps/server
              run: |
                  bunx -y vercel@latest deploy \
                    --prebuilt \
                    --prod --yes \
                    --project "$VERCEL_SERVER_PROJECT_ID" \
                    --token "$VERCEL_TOKEN"

    bunny-cdn:
        name: Update CDN
        runs-on: ubuntu-latest
        environment: production
        needs: [client-build]
        steps:
            - uses: actions/download-artifact@v4
              with:
                  name: client
                  path: apps/client/.vercel/output

            - name: Prepare rclone config
              run: |
                  set -euo pipefail
                  CONF="${GITHUB_WORKSPACE}/rclone.conf"
                  OBF=$(docker run --rm rclone/rclone:1.66 obscure "${BUNNY_TOKEN}")
                  cat > "$CONF" <<EOF
                  [bunny]
                  type = sftp
                  host = ${BUNNY_HOST}
                  user = ${BUNNY_USER}
                  port = 22
                  pass = ${OBF}
                  EOF
                  echo "RCLONE_CONFIG=$CONF" >> "$GITHUB_ENV"

            - name: Sync CDN
              uses: docker://rclone/rclone:1.66
              with:
                  args: >
                      sync /github/workspace/apps/client/.vercel/output/static/assets bunny:/assets
                      --config /github/workspace/rclone.conf
                      --inplace
                      --sftp-set-modtime=false
                      --size-only
                      --transfers=8
                      --checkers=16
                      --fast-list
                      --timeout=2m
                      --retries=5
                      --low-level-retries=10
                      --verbose

            - name: Copy root favicon/manifest to CDN /
              uses: docker://rclone/rclone:1.66
              with:
                  args: >
                      copy /github/workspace/apps/client/.vercel/output/static bunny:/
                      --config /github/workspace/rclone.conf
                      --inplace
                      --include "/favicon*.ico"
                      --include "/favicon*.png"
                      --include "/favicon*.svg"
                      --include "/apple-touch-icon*.png"
                      --include "/site.webmanifest"
                      --exclude "*"
                      --sftp-set-modtime=false
                      --transfers=4
                      --checkers=8
                      --timeout=2m
                      --retries=5
                      --low-level-retries=10
                      --verbose

    run-migrations:
        name: Run migrations
        runs-on: ubuntu-latest
        environment: production
        needs: [vercel-server]
        steps:
            - name: Trigger migrations endpoint
              env:
                  MIGRATION_URL: https://api.zbav-se.me/api/public/migration/run
              run: |
                  set -euo pipefail
                  code=$(curl -sS -o /dev/null -w "%{http_code}" "$MIGRATION_URL")
                  echo "HTTP $code from $MIGRATION_URL"
                  if [ "$code" != "200" ] && [ "$code" != "204" ]; then
                    echo "Migration trigger failed (expected 200/204)."
                    exit 1
                  fi
