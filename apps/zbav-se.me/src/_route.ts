/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './@routes/__root'
import { Route as LocaleRouteImport } from './@routes/$locale'
import { Route as IndexRouteImport } from './@routes/index'
import { Route as LocaleIndexRouteImport } from './@routes/$locale/index'
import { Route as LocaleNRouteImport } from './@routes/$locale/n'
import { Route as LocaleNUserRouteImport } from './@routes/$locale/n/user'
import { Route as LocaleNTestRouteImport } from './@routes/$locale/n/test'
import { Route as LocaleNFeedRouteImport } from './@routes/$locale/n/feed'
import { Route as LocaleNCreateRouteImport } from './@routes/$locale/n/create'
import { Route as LocaleNBagRouteImport } from './@routes/$locale/n/bag'
import { ServerRoute as ApiTrpcServerRouteImport } from './@routes/api/trpc'

const rootServerRouteImport = createServerRootRoute()

const LocaleRoute = LocaleRouteImport.update({
  id: '/$locale',
  path: '/$locale',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LocaleIndexRoute = LocaleIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleNRoute = LocaleNRouteImport.update({
  id: '/n',
  path: '/n',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleNUserRoute = LocaleNUserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => LocaleNRoute,
} as any)
const LocaleNTestRoute = LocaleNTestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => LocaleNRoute,
} as any)
const LocaleNFeedRoute = LocaleNFeedRouteImport.update({
  id: '/feed',
  path: '/feed',
  getParentRoute: () => LocaleNRoute,
} as any)
const LocaleNCreateRoute = LocaleNCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => LocaleNRoute,
} as any)
const LocaleNBagRoute = LocaleNBagRouteImport.update({
  id: '/bag',
  path: '/bag',
  getParentRoute: () => LocaleNRoute,
} as any)
const ApiTrpcServerRoute = ApiTrpcServerRouteImport.update({
  id: '/api/trpc',
  path: '/api/trpc',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/$locale/n': typeof LocaleNRouteWithChildren
  '/$locale/': typeof LocaleIndexRoute
  '/$locale/n/bag': typeof LocaleNBagRoute
  '/$locale/n/create': typeof LocaleNCreateRoute
  '/$locale/n/feed': typeof LocaleNFeedRoute
  '/$locale/n/test': typeof LocaleNTestRoute
  '/$locale/n/user': typeof LocaleNUserRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$locale/n': typeof LocaleNRouteWithChildren
  '/$locale': typeof LocaleIndexRoute
  '/$locale/n/bag': typeof LocaleNBagRoute
  '/$locale/n/create': typeof LocaleNCreateRoute
  '/$locale/n/feed': typeof LocaleNFeedRoute
  '/$locale/n/test': typeof LocaleNTestRoute
  '/$locale/n/user': typeof LocaleNUserRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/$locale/n': typeof LocaleNRouteWithChildren
  '/$locale/': typeof LocaleIndexRoute
  '/$locale/n/bag': typeof LocaleNBagRoute
  '/$locale/n/create': typeof LocaleNCreateRoute
  '/$locale/n/feed': typeof LocaleNFeedRoute
  '/$locale/n/test': typeof LocaleNTestRoute
  '/$locale/n/user': typeof LocaleNUserRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$locale'
    | '/$locale/n'
    | '/$locale/'
    | '/$locale/n/bag'
    | '/$locale/n/create'
    | '/$locale/n/feed'
    | '/$locale/n/test'
    | '/$locale/n/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$locale/n'
    | '/$locale'
    | '/$locale/n/bag'
    | '/$locale/n/create'
    | '/$locale/n/feed'
    | '/$locale/n/test'
    | '/$locale/n/user'
  id:
    | '__root__'
    | '/'
    | '/$locale'
    | '/$locale/n'
    | '/$locale/'
    | '/$locale/n/bag'
    | '/$locale/n/create'
    | '/$locale/n/feed'
    | '/$locale/n/test'
    | '/$locale/n/user'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LocaleRoute: typeof LocaleRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/trpc': typeof ApiTrpcServerRoute
}
export interface FileServerRoutesByTo {
  '/api/trpc': typeof ApiTrpcServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/trpc': typeof ApiTrpcServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/trpc'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/trpc'
  id: '__root__' | '/api/trpc'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiTrpcServerRoute: typeof ApiTrpcServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$locale': {
      id: '/$locale'
      path: '/$locale'
      fullPath: '/$locale'
      preLoaderRoute: typeof LocaleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$locale/': {
      id: '/$locale/'
      path: '/'
      fullPath: '/$locale/'
      preLoaderRoute: typeof LocaleIndexRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/n': {
      id: '/$locale/n'
      path: '/n'
      fullPath: '/$locale/n'
      preLoaderRoute: typeof LocaleNRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/n/user': {
      id: '/$locale/n/user'
      path: '/user'
      fullPath: '/$locale/n/user'
      preLoaderRoute: typeof LocaleNUserRouteImport
      parentRoute: typeof LocaleNRoute
    }
    '/$locale/n/test': {
      id: '/$locale/n/test'
      path: '/test'
      fullPath: '/$locale/n/test'
      preLoaderRoute: typeof LocaleNTestRouteImport
      parentRoute: typeof LocaleNRoute
    }
    '/$locale/n/feed': {
      id: '/$locale/n/feed'
      path: '/feed'
      fullPath: '/$locale/n/feed'
      preLoaderRoute: typeof LocaleNFeedRouteImport
      parentRoute: typeof LocaleNRoute
    }
    '/$locale/n/create': {
      id: '/$locale/n/create'
      path: '/create'
      fullPath: '/$locale/n/create'
      preLoaderRoute: typeof LocaleNCreateRouteImport
      parentRoute: typeof LocaleNRoute
    }
    '/$locale/n/bag': {
      id: '/$locale/n/bag'
      path: '/bag'
      fullPath: '/$locale/n/bag'
      preLoaderRoute: typeof LocaleNBagRouteImport
      parentRoute: typeof LocaleNRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/trpc': {
      id: '/api/trpc'
      path: '/api/trpc'
      fullPath: '/api/trpc'
      preLoaderRoute: typeof ApiTrpcServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface LocaleNRouteChildren {
  LocaleNBagRoute: typeof LocaleNBagRoute
  LocaleNCreateRoute: typeof LocaleNCreateRoute
  LocaleNFeedRoute: typeof LocaleNFeedRoute
  LocaleNTestRoute: typeof LocaleNTestRoute
  LocaleNUserRoute: typeof LocaleNUserRoute
}

const LocaleNRouteChildren: LocaleNRouteChildren = {
  LocaleNBagRoute: LocaleNBagRoute,
  LocaleNCreateRoute: LocaleNCreateRoute,
  LocaleNFeedRoute: LocaleNFeedRoute,
  LocaleNTestRoute: LocaleNTestRoute,
  LocaleNUserRoute: LocaleNUserRoute,
}

const LocaleNRouteWithChildren =
  LocaleNRoute._addFileChildren(LocaleNRouteChildren)

interface LocaleRouteChildren {
  LocaleNRoute: typeof LocaleNRouteWithChildren
  LocaleIndexRoute: typeof LocaleIndexRoute
}

const LocaleRouteChildren: LocaleRouteChildren = {
  LocaleNRoute: LocaleNRouteWithChildren,
  LocaleIndexRoute: LocaleIndexRoute,
}

const LocaleRouteWithChildren =
  LocaleRoute._addFileChildren(LocaleRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LocaleRoute: LocaleRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiTrpcServerRoute: ApiTrpcServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
