/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './@routes/__root'
import { Route as LocaleRouteImport } from './@routes/$locale'
import { Route as IndexRouteImport } from './@routes/index'
import { Route as LocaleIndexRouteImport } from './@routes/$locale/index'
import { Route as LocaleOrderSupplyCreateRouteImport } from './@routes/$locale/order/supply/create'
import { Route as LocaleOrderDemandCreateRouteImport } from './@routes/$locale/order/demand/create'
import { ServerRoute as ApiTrpcServerRouteImport } from './@routes/api/trpc'

const rootServerRouteImport = createServerRootRoute()

const LocaleRoute = LocaleRouteImport.update({
  id: '/$locale',
  path: '/$locale',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LocaleIndexRoute = LocaleIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleOrderSupplyCreateRoute = LocaleOrderSupplyCreateRouteImport.update({
  id: '/order/supply/create',
  path: '/order/supply/create',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleOrderDemandCreateRoute = LocaleOrderDemandCreateRouteImport.update({
  id: '/order/demand/create',
  path: '/order/demand/create',
  getParentRoute: () => LocaleRoute,
} as any)
const ApiTrpcServerRoute = ApiTrpcServerRouteImport.update({
  id: '/api/trpc',
  path: '/api/trpc',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/$locale/': typeof LocaleIndexRoute
  '/$locale/order/demand/create': typeof LocaleOrderDemandCreateRoute
  '/$locale/order/supply/create': typeof LocaleOrderSupplyCreateRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$locale': typeof LocaleIndexRoute
  '/$locale/order/demand/create': typeof LocaleOrderDemandCreateRoute
  '/$locale/order/supply/create': typeof LocaleOrderSupplyCreateRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/$locale/': typeof LocaleIndexRoute
  '/$locale/order/demand/create': typeof LocaleOrderDemandCreateRoute
  '/$locale/order/supply/create': typeof LocaleOrderSupplyCreateRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$locale'
    | '/$locale/'
    | '/$locale/order/demand/create'
    | '/$locale/order/supply/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$locale'
    | '/$locale/order/demand/create'
    | '/$locale/order/supply/create'
  id:
    | '__root__'
    | '/'
    | '/$locale'
    | '/$locale/'
    | '/$locale/order/demand/create'
    | '/$locale/order/supply/create'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LocaleRoute: typeof LocaleRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/trpc': typeof ApiTrpcServerRoute
}
export interface FileServerRoutesByTo {
  '/api/trpc': typeof ApiTrpcServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/trpc': typeof ApiTrpcServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/trpc'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/trpc'
  id: '__root__' | '/api/trpc'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiTrpcServerRoute: typeof ApiTrpcServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$locale': {
      id: '/$locale'
      path: '/$locale'
      fullPath: '/$locale'
      preLoaderRoute: typeof LocaleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$locale/': {
      id: '/$locale/'
      path: '/'
      fullPath: '/$locale/'
      preLoaderRoute: typeof LocaleIndexRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/order/supply/create': {
      id: '/$locale/order/supply/create'
      path: '/order/supply/create'
      fullPath: '/$locale/order/supply/create'
      preLoaderRoute: typeof LocaleOrderSupplyCreateRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/order/demand/create': {
      id: '/$locale/order/demand/create'
      path: '/order/demand/create'
      fullPath: '/$locale/order/demand/create'
      preLoaderRoute: typeof LocaleOrderDemandCreateRouteImport
      parentRoute: typeof LocaleRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/trpc': {
      id: '/api/trpc'
      path: '/api/trpc'
      fullPath: '/api/trpc'
      preLoaderRoute: typeof ApiTrpcServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface LocaleRouteChildren {
  LocaleIndexRoute: typeof LocaleIndexRoute
  LocaleOrderDemandCreateRoute: typeof LocaleOrderDemandCreateRoute
  LocaleOrderSupplyCreateRoute: typeof LocaleOrderSupplyCreateRoute
}

const LocaleRouteChildren: LocaleRouteChildren = {
  LocaleIndexRoute: LocaleIndexRoute,
  LocaleOrderDemandCreateRoute: LocaleOrderDemandCreateRoute,
  LocaleOrderSupplyCreateRoute: LocaleOrderSupplyCreateRoute,
}

const LocaleRouteWithChildren =
  LocaleRoute._addFileChildren(LocaleRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LocaleRoute: LocaleRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiTrpcServerRoute: ApiTrpcServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
